{"version":3,"sources":["SaveRestore.tsx","reportWebVitals.ts","index.tsx"],"names":["localforage","config","name","storeName","flowKey","customNodeStyles","margin","padding","backgroundColor","color","CustomNodeComponent","data","style","className","title","lable1","lable2","initialElements","id","label","position","x","y","source","target","SaveRestore","useState","rfInstance","setRfInstance","elements","setElements","onRestore","useCallback","flow","toObject","setItem","console","log","a","getItem","restoreFlow","onAdd","newNode","Date","els","concat","height","onClick","nodeTypes","special","onElementsRemove","elementsToRemove","removeElements","onConnect","params","addEdge","onLoad","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAYAA,IAAYC,OAAO,CACfC,KAAM,kBACNC,UAAW,UAGf,IAAMC,EAAU,eACVC,EAAmB,CACrBC,OAAQ,EACRC,QAAS,EACTC,gBAAiB,QACjBC,MAAO,SAGLC,EAAsB,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,KAC1B,OACI,sBAAKC,MAAOP,EAAZ,UACI,qBAAKQ,UAAW,gBAAhB,SAAkCF,EAAKG,QACvC,qBAAKD,UAAW,eAAhB,SAAiCF,EAAKI,SACtC,qBAAKF,UAAW,eAAhB,SAAiCF,EAAKK,aAI5CC,EAAkB,CACpB,CAAEC,GAAI,IAAKL,UAAW,2BAA4BF,KAAM,CAAEQ,MAAO,cAAC,EAAD,CAAqBR,KAAM,CAAEG,MAAO,eAAgBC,OAAQ,YAAaC,OAAQ,YAAiBI,SAAU,CAAEC,EAAG,IAAKC,EAAG,MAC1L,CAAEJ,GAAI,IAAKL,UAAW,2BAA4BF,KAAM,CAAEQ,MAAO,cAAC,EAAD,CAAqBR,KAAM,CAAEG,MAAO,iBAAkBC,OAAQ,YAAaC,OAAQ,SAAcI,SAAU,CAAEC,EAAG,IAAKC,EAAG,MACzL,CAAEJ,GAAI,OAAQK,OAAQ,IAAKC,OAAQ,MAiExBC,EA9DK,WAAO,IAAD,EACcC,mBAAc,MAD5B,mBACfC,EADe,KACHC,EADG,OAEUF,mBAAmBT,GAF7B,mBAEfY,EAFe,KAELC,EAFK,KAchBC,GAPSC,uBAAY,WACvB,GAAIL,EAAY,CAEZ,IAAMM,EAAON,EAAWO,WACxBlC,IAAYmC,QAAQ/B,EAAS6B,MAElC,CAACN,IACcK,uBAAY,WAC1BI,QAAQC,IAAI,qBACK,uCAAG,sBAAAC,EAAA,sEACGtC,IAAYuC,QAAQnC,GADvB,eAMZ0B,EAAYb,GANA,2CAAH,oDAWjBuB,KACD,CAACV,KACEW,EAAQT,uBAAY,WACtBI,QAAQC,IAAI,iBACZ,IAAMK,EAAU,CACZxB,GAhDM,sBAAqB,IAAIyB,MAiD/B9B,UAAW,2BACXF,KAAM,CAAEQ,MAAO,cAAC,EAAD,CAAqBR,KAAM,CAAEG,MAAO,aAAcC,OAAQ,eAAgBC,OAAQ,WACjGI,SAAU,CACNC,EAAG,GACHC,EAAG,KAGXQ,GAAY,SAACc,GAAD,OAASA,EAAIC,OAAOH,QACjC,CAACZ,IAEJ,OACI,cAAC,IAAD,UACI,sBAAKlB,MAAO,CAAEkC,OAAQ,KAAtB,UACI,gCACI,wBAAQC,QAAShB,EAAjB,qBACA,wBAAQgB,QAASN,EAAjB,yBAER,cAAC,IAAD,CACIO,UAAW,CAAEC,QAASvC,GACtBmB,SAAUA,EACVqB,iBAlDa,SAACC,GAAD,OACrBrB,GAAY,SAACc,GAAD,OAASQ,YAAeD,EAAkBP,OAkD9CS,UAjDM,SAACC,GAAD,OAA+BxB,GAAY,SAACc,GAAD,OAASW,YAAQD,EAAQV,OAkD1EY,OAAQ5B,UCjFT6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8661983d.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport ReactFlow, {\n    ReactFlowProvider,\n    removeElements,\n    addEdge,\n    Elements,\n    Edge,\n    Connection,\n} from 'react-flow-renderer';\nimport './App.css'\nimport localforage from 'localforage';\n\nlocalforage.config({\n    name: 'react-flow-docs',\n    storeName: 'flows',\n});\n\nconst flowKey = 'example-flow';\nconst customNodeStyles = {\n    margin: 0,\n    padding: 0,\n    backgroundColor: 'white',\n    color: 'black'\n};\nconst getNodeId = () => `randomnode_${+new Date()}`;\nconst CustomNodeComponent = ({data} : { data: any }) => {\n    return (\n        <div style={customNodeStyles}>\n            <div className={'node_div_main'}>{data.title}</div>\n            <div className={'node_div_sub'}>{data.lable1}</div>\n            <div className={'node_div_sub'}>{data.lable2}</div>\n        </div>\n    );\n}\nconst initialElements = [\n    { id: '1', className: 'react-flow__node-default', data: { label: <CustomNodeComponent data={{ title: 'Front Vision', lable1: 'Frames(1)', lable2: '30 Hz' }} /> }, position: { x: 100, y: 100 } },\n    { id: '2', className: 'react-flow__node-default', data: { label: <CustomNodeComponent data={{ title: 'Pedistrian ROI', lable1: 'Frames(1)', lable2: null }} /> }, position: { x: 100, y: 200 } },\n    { id: 'e1-2', source: '1', target: '2' },\n];\n\nconst SaveRestore = () => {\n    const [rfInstance, setRfInstance] = useState<any>(null);\n    const [elements, setElements] = useState<Elements>(initialElements);\n    const onElementsRemove = (elementsToRemove: Elements) =>\n        setElements((els) => removeElements(elementsToRemove, els));\n    const onConnect = (params: Edge | Connection) => setElements((els) => addEdge(params, els));\n    // const { transform } = useZoomPanHelper();\n    const onSave = useCallback(() => {\n        if (rfInstance) {\n            // @ts-ignore\n            const flow = rfInstance.toObject();\n            localforage.setItem(flowKey, flow);\n        }\n    }, [rfInstance]);\n    const onRestore = useCallback(() => {\n        console.log('onRestore pressed')\n        const restoreFlow = async () => {\n            const flow = await localforage.getItem(flowKey);\n            if (flow) {\n                // @ts-ignore\n                //const [x = 0, y = 0] = flow.position;\n                // @ts-ignore\n                setElements(initialElements);\n                // @ts-ignore\n                // transform({ x, y, zoom: flow.zoom || 0 });\n            }\n        };\n        restoreFlow();\n    }, [setElements]);\n    const onAdd = useCallback(() => {\n        console.log('onAdd pressed')\n        const newNode = {\n            id: getNodeId(),\n            className: 'react-flow__node-default',\n            data: { label: <CustomNodeComponent data={{ title: 'Added Node', lable1: 'added frames', lable2: 'x Hz' }} />},\n            position: {\n                x: 50,\n                y: 70,\n            },\n        };\n        setElements((els) => els.concat(newNode));\n    }, [setElements]);\n\n    return (\n        <ReactFlowProvider>\n            <div style={{ height: 1000 }}>\n                <div >\n                    <button onClick={onRestore}>restore</button>\n                    <button onClick={onAdd}>add node</button>\n                </div>\n            <ReactFlow\n                nodeTypes={{ special: CustomNodeComponent }}\n                elements={elements}\n                onElementsRemove={onElementsRemove}\n                onConnect={onConnect}\n                onLoad={setRfInstance}\n            >\n            </ReactFlow>\n            </div>\n        </ReactFlowProvider>\n    );\n};\nexport default SaveRestore;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SaveRestore from './SaveRestore';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SaveRestore />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}